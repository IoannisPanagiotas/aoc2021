import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
class  OnSegment{
	public int x[];
	public int y[];
	public int z[];
	public long getOnes() {
		long lx=x[1]-x[0]+1;
		long ly=y[1]-y[0]+1;
		long lz=z[1]-z[0]+1;
		return lx*ly*lz;
	}
}
public class Day22 {
	public static int[] getCoords(String s) {
		int[] co=new int[2];
		String[] l=s.split("\\.\\.");
		
		co[0]=Integer.parseInt(l[0].substring(2, l[0].length()));
		co[1]=Integer.parseInt(l[1]);
		return co;
	}
	public static int[] intersectionWith(int[] x,int[] y) {
			int[] xy=new int[2];
			if (x[1] < y[0]) xy[0]=Integer.MAX_VALUE;
			else if ( y[1] < x[0]) xy[0]=Integer.MAX_VALUE;
			else {
				xy[0]=Math.max(x[0], y[0]);    
				xy[1]=Math.min(x[1], y[1]);
			}		
			return xy;
	}
	public static int updateGrid(boolean on,int[][][] grid,int[] x,int[]y,int[] z,int LIMITDOWN,int LIMITUP) {
		int diff=0;
		int[] realx=intersectionWith(x,new int[]{LIMITDOWN,LIMITUP});
		int[] realy=intersectionWith(y,new int[]{LIMITDOWN,LIMITUP});
		int[] realz=intersectionWith(z,new int[]{LIMITDOWN,LIMITUP});
			if (realx[0]==Integer.MAX_VALUE)
				return 0;
			if (realy[0]==Integer.MAX_VALUE)
				return 0;
			if (realz[0]==Integer.MAX_VALUE)
				return 0;
		
		for (int i=realx[0];i<=realx[1];++i) {
			for (int j=realy[0];j<=realy[1];++j) {
				for (int w=realz[0];w<=realz[1];++w) {
					int gi=i-LIMITDOWN;
					int gj=j-LIMITDOWN;
					int gz=w-LIMITDOWN;
					if (on && grid[gi][gj][gz]==0) {
						diff++;
						grid[gi][gj][gz]=1;
					}else if (!on && grid[gi][gj][gz]==1) {
						diff--;
						grid[gi][gj][gz]=0;
					}
				}
			}
		}
		return diff;
	}
	public static int function(String fname,int LIMITDOWN,int LIMITUP)  throws IOException{
		BufferedReader brdr=new BufferedReader(new FileReader(fname));
		int gridsize=LIMITUP-LIMITDOWN+1;
		int[][][] grid=new int[gridsize][gridsize][gridsize];
		int lit=0;
		String ln;
		while ((ln=brdr.readLine())!=null) {
			String[] lns=ln.split(" ");
			String[] lncomma=lns[1].split(",");
			int[] x=getCoords(lncomma[0]);
			int[] y=getCoords(lncomma[1]);
			int[] z=getCoords(lncomma[2]);
			lit+=updateGrid(lns[0].equals("on"),grid,x,y,z,LIMITDOWN,LIMITUP);
		}
		return lit;
	}
	public static long function2(String fname)  throws IOException{
		BufferedReader brdr=new BufferedReader(new FileReader(fname));

		ArrayList<OnSegment> segments=new ArrayList<OnSegment>();
		String ln="";
		while ((ln=brdr.readLine())!=null) {
			String[] lns=ln.split(" ");
			String[] lncomma=lns[1].split(",");
			int[] x=getCoords(lncomma[0]);
			int[] y=getCoords(lncomma[1]);
			int[] z=getCoords(lncomma[2]);
			if (lns[0].equals("on"))){ // reduce this segment into a series of disjoint segments
										//such that each disjoint segment is not intersecting with any of the segments in
										//the arraylist
			}else { 				    // for each segment in the arraylist
										//find its intersection  and create new segments to insert in the arraylist
				
			}
		}
		long ans=0;
		for (OnSegment segment: segments)
			ans+=segment.getOnes();
		return ans;
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		String SAMPLE="input/day22_sample.txt";
		String REAL="input/day22.txt";

		System.out.println(function(SAMPLE,-50,50));
		System.out.println(function(REAL,-50,50));
	}

}
